{
    "folderStructure": {
      "description": "Folder structure for Next.js frontend pages and components.",
      "structure": [
        "app/",
        "├── (auth)/             # Route group for auth pages",
        "│   ├── login/",
        "│   │   └── page.tsx",
        "│   └── signup/",
        "│       └── page.tsx",
        "├── chat/",
        "│   └── page.tsx",
        "├── layout.tsx          # Root layout (assumed setup with ThemeProvider etc.)",
        "├── page.tsx            # Home page (optional)",
        "components/",
        "├── auth/",
        "│   ├── LoginForm.tsx",
        "│   └── SignupForm.tsx",
        "├── chat/",
        "│   ├── ChatLayout.tsx    # Wrapper for chat page layout and state",
        "│   ├── ChatSidebar.tsx",
        "│   ├── ChatWindow.tsx",
        "│   └── MessageInput.tsx",
        "├── ui/                 # shadcn/ui components (generated via CLI)",
        "│   ├── button.tsx",
        "│   ├── input.tsx",
        "│   ├── label.tsx",
        "│   ├── avatar.tsx",
        "│   ├── card.tsx",
        "│   ├── dropdown-menu.tsx",
        "│   ├── scroll-area.tsx",
        "│   └── ... (other components)",
        "├── providers/          # Context providers",
        "│   ├── AuthProvider.tsx",
        "│   └── ChatProvider.tsx",
        "hooks/",
        "├── useAuth.ts          # Custom hook for AuthContext",
        "├── useChat.ts          # Custom hook for ChatContext",
        "lib/",
        "├── utils.ts            # shadcn/ui utility (cn function)",
        "└── api.ts              # API call utility functions (optional)"
      ]
    },
    "loginPage": {
      "path": "app/(auth)/login/page.tsx",
      "code": "'use client';\n\nimport { LoginForm } from '@/components/auth/LoginForm';\nimport { AuthProvider } from '@/components/providers/AuthProvider';\n\nexport default function LoginPage() {\n  return (\n    // AuthProvider might be higher up in the layout if needed globally\n    <AuthProvider>\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-100 dark:bg-gray-950\">\n        <LoginForm />\n      </div>\n    </AuthProvider>\n  );\n}"
    },
    "signupPage": {
      "path": "app/(auth)/signup/page.tsx",
      "code": "'use client';\n\nimport { SignupForm } from '@/components/auth/SignupForm';\nimport { AuthProvider } from '@/components/providers/AuthProvider';\n\nexport default function SignupPage() {\n  return (\n    // AuthProvider might be higher up in the layout if needed globally\n    <AuthProvider>\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-100 dark:bg-gray-950\">\n        <SignupForm />\n      </div>\n    </AuthProvider>\n  );\n}"
    },
    "chatPage": {
      "path": "app/chat/page.tsx",
      "code": "'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { ChatProvider } from '@/components/providers/ChatProvider';\nimport ChatLayout from '@/components/chat/ChatLayout';\nimport { Loader2 } from 'lucide-react';\n\nexport default function ChatPage() {\n  const { token, isLoading } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isLoading && !token) {\n      router.push('/login');\n    }\n  }, [token, isLoading, router]);\n\n  if (isLoading || !token) {\n    // Display a loading indicator while checking auth or redirecting\n    return (\n      <div className=\"flex h-screen w-screen items-center justify-center bg-gray-900\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-purple-400\" />\n      </div>\n    );\n  }\n\n  // Wrap the chat layout with the ChatProvider\n  return (\n    <ChatProvider>\n      <ChatLayout />\n    </ChatProvider>\n  );\n}"
    },
    "components": {
      "authProvider": {
          "path": "components/providers/AuthProvider.tsx",
          "code": "'use client';\n\nimport React, { createContext, useState, useEffect, ReactNode, useCallback } from 'react';\n\ninterface AuthContextType {\n  token: string | null;\n  user: { email?: string; id?: string } | null; // Add more user details if needed\n  isLoading: boolean;\n  login: (token: string, user?: any) => void;\n  logout: () => void;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Define a type for the props\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [token, setToken] = useState<string | null>(null);\n  const [user, setUser] = useState<AuthContextType['user']>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Try to load token from localStorage on initial mount\n    try {\n      const storedToken = localStorage.getItem('authToken');\n      const storedUser = localStorage.getItem('authUser');\n      if (storedToken) {\n        setToken(storedToken);\n        if (storedUser) {\n            setUser(JSON.parse(storedUser));\n        } // Add logic here to fetch user details if needed based on token\n      }\n    } catch (error) {\n        console.error(\"Failed to parse auth data from localStorage\", error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('authUser');\n    } finally {\n         setIsLoading(false);\n    }\n  }, []);\n\n  const login = useCallback((newToken: string, userData?: any) => {\n    setToken(newToken);\n    localStorage.setItem('authToken', newToken);\n    if (userData) {\n        const minimalUserData = { email: userData.email, id: userData.id }; // Store only necessary info\n        setUser(minimalUserData);\n        localStorage.setItem('authUser', JSON.stringify(minimalUserData));\n    } else {\n        // If no user data provided, clear it\n        setUser(null);\n        localStorage.removeItem('authUser');\n        // Optionally: fetch user data using the token here\n    }\n    setIsLoading(false);\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('authUser');\n    setIsLoading(false);\n    // Optionally: redirect to login page can happen here or in the component using logout\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ token, user, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"
      },
       "useAuthHook": {
          "path": "hooks/useAuth.ts",
          "code": "import { useContext } from 'react';\nimport { AuthContext } from '@/components/providers/AuthProvider';\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"
      },
      "chatProvider": {
          "path": "components/providers/ChatProvider.tsx",
          "code": "'use client';\n\nimport React, { createContext, useState, useCallback, ReactNode, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport enum MessageRole { User = 'USER', Assistant = 'ASSISTANT' };\n\ninterface Message {\n  id: string;\n  chatId: string;\n  role: MessageRole;\n  content: string;\n  createdAt: string; // Or Date\n}\n\ninterface Chat {\n  id: string;\n  title?: string | null;\n  // Add other chat metadata if needed\n}\n\ninterface ChatContextType {\n  chats: Chat[];\n  currentChatId: string | null;\n  messages: Message[];\n  isLoadingMessages: boolean;\n  isSendingMessage: boolean;\n  error: string | null;\n  selectChat: (chatId: string) => void;\n  createNewChat: () => Promise<void>;\n  sendMessage: (content: string) => Promise<void>;\n  fetchChats: () => Promise<void>;\n}\n\nexport const ChatContext = createContext<ChatContextType | undefined>(undefined);\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({ children }) => {\n  const { token } = useAuth(); // Need token for API calls\n  const [chats, setChats] = useState<Chat[]>([]); // List of user's chats\n  const [currentChatId, setCurrentChatId] = useState<string | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoadingMessages, setIsLoadingMessages] = useState(false);\n  const [isSendingMessage, setIsSendingMessage] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchChats = useCallback(async () => {\n    if (!token) return;\n    setError(null);\n    // setIsLoadingChats(true); // Add loading state for chat list if needed\n    try {\n        // TODO: Implement API call to GET /api/chats (new endpoint needed to list chats)\n        // const response = await fetch('/api/chats', { headers: { 'Authorization': `Bearer ${token}` } });\n        // if (!response.ok) throw new Error('Failed to fetch chats');\n        // const data = await response.json();\n        // setChats(data.chats || []);\n        console.warn('Chat list fetching not implemented. Using placeholder.');\n        setChats([\n            { id: 'chat1', title: 'Chat about Project A long title...' },\n            { id: 'chat2', title: 'New Feature Discussion' },\n        ]);\n    } catch (err: any) {\n        setError(err.message || 'Failed to fetch chats');\n    } finally {\n        // setIsLoadingChats(false);\n    }\n}, [token]);\n\n  // Fetch chats on initial load\n  useEffect(() => {\n      fetchChats();\n  }, [fetchChats]);\n\n  const selectChat = useCallback(async (chatId: string) => {\n    if (!token) return;\n    setCurrentChatId(chatId);\n    setMessages([]); // Clear previous messages\n    setError(null);\n    setIsLoadingMessages(true);\n    try {\n      const response = await fetch(`/api/chat/history?chatId=${chatId}`, {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Failed to fetch history (status ${response.status})`);\n      }\n      const data = await response.json();\n      setMessages(data.history || []);\n    } catch (err: any) {\n      setError(err.message);\n      setMessages([]); // Clear messages on error\n    } finally {\n      setIsLoadingMessages(false);\n    }\n  }, [token]);\n\n  const sendMessage = useCallback(async (content: string) => {\n    if (!token || !currentChatId) return;\n    setError(null);\n    setIsSendingMessage(true);\n\n    // Add user message immediately for better UX\n    const userMessage: Message = {\n      id: `temp-${Date.now()}`,\n      chatId: currentChatId,\n      role: MessageRole.User,\n      content,\n      createdAt: new Date().toISOString(),\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ message: content, chatId: currentChatId }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Failed to send message (status ${response.status})`);\n      }\n\n      const data = await response.json();\n\n      // Add AI response\n      const aiMessage: Message = {\n        id: data.messageId, // Assuming API returns the ID of the saved AI message\n        chatId: currentChatId,\n        role: MessageRole.Assistant,\n        content: data.response,\n        createdAt: new Date().toISOString(), // Or use timestamp from API if available\n      };\n\n      // Replace temp user message if needed, add AI message\n      // For simplicity, just append AI message. A more robust solution\n      // might wait for save confirmation before showing user message or update temp id.\n      setMessages(prev => [...prev, aiMessage]);\n\n    } catch (err: any) {\n      setError(err.message);\n      // Optionally remove the optimistic user message on error\n      setMessages(prev => prev.filter(msg => msg.id !== userMessage.id));\n    } finally {\n      setIsSendingMessage(false);\n    }\n  }, [token, currentChatId]);\n\n  const createNewChat = useCallback(async () => {\n      if (!token) return;\n      setError(null);\n      setIsSendingMessage(true); // Use sending state for creating chat too\n      try {\n          // We can create a chat implicitly by sending the first message without a chatId\n          // Or have a dedicated endpoint if needed.\n          // Let's assume sending the first message creates the chat.\n          console.log(\"Creating new chat...\");\n          // For MVP, we might just clear state and let the first message sent create the chat.\n          setCurrentChatId(null); // Indicate no chat is selected\n          setMessages([]);\n          // TODO: Potentially call a specific `/api/chat/create` endpoint if needed\n          // After creation, might need to fetch chats again or add to list\n          // await fetchChats();\n\n          // Simulate creation for now, then select it\n          const newChatId = `new-${Date.now()}`;\n          const newChat: Chat = { id: newChatId, title: 'New Chat' };\n          setChats(prev => [newChat, ...prev]);\n          setCurrentChatId(newChatId);\n          setMessages([]);\n\n      } catch (err: any) {
             setError(err.message || 'Failed to create new chat');
        } finally {\n           setIsSendingMessage(false);\n      }\n  }, [token]);\n\n  return (\n    <ChatContext.Provider value={{ chats, currentChatId, messages, isLoadingMessages, isSendingMessage, error, selectChat, sendMessage, fetchChats, createNewChat }}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n"
      },
      "useChatHook": {
          "path": "hooks/useChat.ts",
          "code": "import { useContext } from 'react';\nimport { ChatContext } from '@/components/providers/ChatProvider';\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};"
      },
      "loginForm": {
        "path": "components/auth/LoginForm.tsx",
        "code": "'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\n\nexport function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(null);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || `Login failed (status ${response.status})`);\n      }\n\n      login(data.token); // Store token using AuthContext\n      router.push('/chat'); // Redirect to chat dashboard\n\n    } catch (err: any) {\n      setError(err.message || 'An unexpected error occurred.');\n      setIsLoading(false);\n    }\n    // No need to set isLoading to false on success because of redirect\n  };\n\n  return (\n    <Card className=\"w-full max-w-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Login</CardTitle>\n        <CardDescription>\n          Enter your email below to login to your account.\n        </CardDescription>\n      </CardHeader>\n      <form onSubmit={handleSubmit}>\n        <CardContent className=\"grid gap-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"m@example.com\"\n              required\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={isLoading}\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              required\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              disabled={isLoading}\n            />\n          </div>\n          {error && (\n            <p className=\"text-sm text-red-600 dark:text-red-500\">{error}</p>\n          )}\n        </CardContent>\n        <CardFooter className=\"flex flex-col items-stretch\">\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : 'Sign In'}\n          </Button>\n           <div className=\"mt-4 text-center text-sm\">\n            Don&apos;t have an account?{\" \"}\n            <Link href=\"/signup\" className=\"underline\">\n              Sign up\n            </Link>\n          </div>\n        </CardFooter>\n      </form>\n    </Card>\n  );\n}"
      },
      "signupForm": {
        "path": "components/auth/SignupForm.tsx",
        "code": "'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\n\nexport function SignupForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(null);\n    setSuccess(null);\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n    if (password.length < 8) {\n        setError('Password must be at least 8 characters long.');\n        return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || `Signup failed (status ${response.status})`);\n      }\n\n      setSuccess('Account created successfully! Redirecting to login...');\n      setTimeout(() => {\n        router.push('/login'); // Redirect to login page after a short delay\n      }, 1500);\n\n    } catch (err: any) {\n      setError(err.message || 'An unexpected error occurred.');\n      setIsLoading(false);\n    } finally {\n       // Keep loading true on success until redirect timer fires\n       if (error) setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Sign Up</CardTitle>\n        <CardDescription>\n          Enter your information to create an account\n        </CardDescription>\n      </CardHeader>\n      <form onSubmit={handleSubmit}>\n        <CardContent className=\"grid gap-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"m@example.com\"\n              required\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={isLoading}\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              required\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              disabled={isLoading}\n              aria-describedby='password-hint'\n            />\n             <p id=\"password-hint\" className=\"text-xs text-muted-foreground\">Minimum 8 characters.</p>\n          </div>\n           <div className=\"grid gap-2\">\n            <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n            <Input\n              id=\"confirm-password\"\n              type=\"password\"\n              required\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              disabled={isLoading}\n            />\n          </div>\n          {error && (\n            <p className=\"text-sm text-red-600 dark:text-red-500\">{error}</p>\n          )}\n          {success && (\n            <p className=\"text-sm text-green-600 dark:text-green-500\">{success}</p>\n          )}\n        </CardContent>\n        <CardFooter className=\"flex flex-col items-stretch\">\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n             {isLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : 'Create account'}\n          </Button>\n          <div className=\"mt-4 text-center text-sm\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"underline\">\n              Sign in\n            </Link>\n          </div>\n        </CardFooter>\n      </form>\n    </Card>\n  );\n}"
      },
      "chatLayout": {
        "path": "components/chat/ChatLayout.tsx",
        "code": "'use client';\n\nimport ChatSidebar from './ChatSidebar';\nimport ChatWindow from './ChatWindow';\n\nexport default function ChatLayout() {\n\n  return (\n    <div className=\"flex h-screen w-screen bg-gray-900 text-white font-sans overflow-hidden\">\n      <ChatSidebar />\n      <ChatWindow />\n    </div>\n  );\n}"
      },
      "chatSidebar": {
        "path": "components/chat/ChatSidebar.tsx",
        "code": "'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useChat } from '@/hooks/useChat';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Search, Plus, Settings, MessageSquare, Loader2 } from 'lucide-react';\n\nexport default function ChatSidebar() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const { chats, selectChat, createNewChat, currentChatId, isLoadingMessages, isSendingMessage } = useChat();\n  const { user, logout } = useAuth();\n\n  const handleNewChat = () => {\n      createNewChat();\n  };\n\n  // Filter chats based on search query (case-insensitive)\n  const filteredChats = chats.filter(chat =>\n    chat.title?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getInitials = (email?: string) => {\n      return email ? email.substring(0, 2).toUpperCase() : '??';\n  }\n\n  return (\n    <aside className=\"w-64 bg-gray-800 p-4 flex flex-col border-r border-gray-700 flex-shrink-0\">\n      {/* Sidebar Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-2\">\n          {/* Replace with your logo */}\n          <MessageSquare size={24} className=\"text-purple-400\" />\n          <span className=\"font-semibold text-lg\">Chat MVP</span>\n        </div>\n        <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-white\">\n          <Settings size={18} />\n        </Button>\n      </div>\n\n      {/* New Chat Button */}\n      <Button\n        onClick={handleNewChat}\n        className=\"w-full mb-4 bg-purple-600 hover:bg-purple-700 text-white rounded-md\"\n        disabled={isSendingMessage}\n      >\n        {isSendingMessage && currentChatId === null ? (\n            <Loader2 size={18} className=\"mr-2 animate-spin\" />\n        ) : (\n            <Plus size={18} className=\"mr-2\" />\n        )}\n        New Chat\n      </Button>\n\n      {/* Search Input */}\n      <div className=\"relative mb-4\">\n        <Search size={18} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none\" />\n        <Input\n          type=\"search\"\n          placeholder=\"Search chats...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10 w-full bg-gray-700 border-gray-600 placeholder-gray-400 text-white rounded-md focus:ring-purple-500 focus:border-purple-500 focus:outline-none\"\n        />\n      </div>\n\n      {/* Chat List */}
        <ScrollArea className=\"flex-1 -mr-4 pr-3\"> {/* Negative margin + padding for scrollbar */}
          <nav className=\"space-y-1\">\n          <h3 className=\"text-xs font-semibold text-gray-400 uppercase mb-2 px-2\">All chats</h3>\n          {filteredChats.length > 0 ? (\n              filteredChats.map((chat) => (\n                <Button\n                  key={chat.id}\n                  variant=\"ghost\"\n                  onClick={() => selectChat(chat.id)}\n                  disabled={isLoadingMessages && currentChatId === chat.id}\n                  className={`w-full justify-start items-center p-2 rounded-md hover:bg-gray-700 text-sm text-gray-300 transition-colors duration-150 ${currentChatId === chat.id ? 'bg-gray-700 text-white' : ''}`}\n                >\n                  {isLoadingMessages && currentChatId === chat.id ? (\n                       <Loader2 size={16} className=\"mr-3 flex-shrink-0 animate-spin\" />\n                  ) : (\n                      <MessageSquare size={16} className=\"mr-3 flex-shrink-0\" />\n                  )}\n                  <span className=\"truncate\">{chat.title || 'Untitled Chat'}</span>\n                </Button>\n              ))\n          ) : (\n              <p className=\"px-2 text-sm text-gray-500\">No chats found.</p>\n          )}\n        </nav>\n      </ScrollArea>\n\n      {/* User Profile Footer */}\n      <div className=\"mt-4 border-t border-gray-700 pt-4\">\n        <div className=\"flex items-center justify-between gap-3 p-2 rounded-md hover:bg-gray-700 transition-colors duration-150\">\n           <div className=\"flex items-center gap-3 cursor-pointer truncate\">\n              <Avatar className=\"h-8 w-8\">\n                {/* Add actual user avatar source if available */}
                  <AvatarImage src={`https://avatar.vercel.sh/${user?.email || 'default'}.png?size=32`} alt=\"User Avatar\" />\n                <AvatarFallback className=\"text-xs bg-purple-600 text-white\">{getInitials(user?.email)}</AvatarFallback>\n              </Avatar>\n              <span className=\"text-sm font-medium truncate\">{user?.email || 'User'}</span>\n           </div>\n           <Button variant=\"ghost\" size=\"sm\" onClick={logout} className=\"text-gray-400 hover:text-white\">Logout</Button>\n        </div>\n      </div>\n    </aside>\n  );\n}"
      },
      "chatWindow": {
        "path": "components/chat/ChatWindow.tsx",
        "code": "'use client';\n\nimport React, { useEffect, useRef } from 'react';\nimport { useChat, MessageRole } from '@/hooks/useChat';\nimport { useAuth } from '@/hooks/useAuth';\nimport MessageInput from './MessageInput';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { ChevronDown, Loader2, AlertCircle, Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport default function ChatWindow() {\n  const { messages, isLoadingMessages, error, currentChatId } = useChat();\n  const { user } = useAuth();\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to bottom when messages change or loading finishes\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isLoadingMessages]);\n\n  const getInitials = (email?: string) => {\n      return email ? email.substring(0, 2).toUpperCase() : '??';\n  }\n\n  return (\n    <main className=\"flex-grow flex flex-col bg-gray-900 relative\">\n      {/* Header (Model Selector & User Avatar) */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-700 flex-shrink-0\">\n         <DropdownMenu>\n           <DropdownMenuTrigger asChild>\n             <Button variant=\"ghost\" className=\"flex items-center gap-2 text-lg font-semibold text-gray-200 hover:text-white\">\n               AI Model <span className=\"text-gray-400 text-sm\">(Default)</span>\n               <ChevronDown size={18} />\n             </Button>\n           </DropdownMenuTrigger>\n           <DropdownMenuContent className=\"w-56 bg-gray-800 border-gray-700 text-white rounded-md shadow-lg\">\n             <DropdownMenuLabel className=\"text-gray-400\">Select Model</DropdownMenuLabel>\n             <DropdownMenuSeparator className=\"bg-gray-700\"/>\n             <DropdownMenuItem className=\"hover:bg-gray-700 focus:bg-gray-700 cursor-pointer\">Default Model (e.g., GPT-4o)</DropdownMenuItem>\n             <DropdownMenuItem className=\"hover:bg-gray-700 focus:bg-gray-700 cursor-pointer\" disabled>Another Model (Soon)</DropdownMenuItem>\n           </DropdownMenuContent>\n         </DropdownMenu>\n         <Avatar className=\"h-9 w-9\">\n            <AvatarImage src={`https://avatar.vercel.sh/${user?.email || 'default'}.png?size=36`} alt=\"User Avatar\" />\n            <AvatarFallback className=\"bg-purple-600 text-white\">{getInitials(user?.email)}</AvatarFallback>\n          </Avatar>\n      </div>\n\n      {/* Message Display Area */}\n      <ScrollArea className=\"flex-1 p-4 md:p-6\" ref={scrollAreaRef}>\n        <div className=\"max-w-4xl mx-auto w-full space-y-4\">\n          {isLoadingMessages && (\n            <div className=\"flex justify-center items-center py-10\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-purple-400\" />\n            </div>\n          )}\n\n          {!isLoadingMessages && error && (\n            <div className=\"flex flex-col items-center justify-center text-center text-red-500 py-10\">\n               <AlertCircle className=\"h-8 w-8 mb-2\"/>\n               <p className=\"font-semibold\">Failed to load messages</p>\n               <p className=\"text-sm text-red-400\">{error}</p>\n            </div>\n          )}\n\n          {!isLoadingMessages && !error && messages.length === 0 && currentChatId && (\n            <div className=\"text-center text-gray-500 py-10\">\n              <p>Send a message to start the conversation.</p>\n            </div>\n          )}\n\n           {!isLoadingMessages && !error && messages.length === 0 && !currentChatId && (\n            <div className=\"text-center text-gray-400 py-10 px-4\">\n              <h1 className=\"text-2xl font-semibold mb-2 text-gray-100\">Welcome, {user?.email || 'User'}!</h1>\n              <p>Select a chat from the sidebar or start a new one.</p>\n              {/* Placeholder similar to the initial UI idea */}\n              {/* Add suggestion buttons etc. if needed */}
              </div>\n          )}\n\n          {!isLoadingMessages && !error && messages.map((message, index) => (\n            <div\n              key={message.id || `msg-${index}`}\n              className={cn(\n                'flex items-start gap-3',\n                message.role === MessageRole.User ? 'justify-end' : 'justify-start'\n              )}\n            >\n              {message.role === MessageRole.Assistant && (\n                <Avatar className=\"h-8 w-8 flex-shrink-0\">\n                  <AvatarFallback className=\"bg-gray-700 text-purple-400\">\n                      <Bot size={20} />\n                  </AvatarFallback>\n                </Avatar>\n              )}\n              <div\n                className={cn(\n                  'max-w-[75%] rounded-lg px-4 py-2 text-sm',\n                  message.role === MessageRole.User\n                    ? 'bg-purple-600 text-white'\n                    : 'bg-gray-700 text-gray-200'\n                )}\n              >\n                {/* Basic rendering of content. Consider markdown rendering later */}
                  <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                {/* <span className=\"text-xs text-gray-400 block mt-1 text-right\">{new Date(message.createdAt).toLocaleTimeString()}</span> */}
                </div>\n              {message.role === MessageRole.User && (\n                 <Avatar className=\"h-8 w-8 flex-shrink-0\">\n                    <AvatarImage src={`https://avatar.vercel.sh/${user?.email || 'default'}.png?size=32`} alt=\"User Avatar\" />\n                    <AvatarFallback className=\"bg-purple-600 text-white\">{getInitials(user?.email)}</AvatarFallback>\n                </Avatar>\n              )}\n            </div>\n          ))}\n          {/* Invisible element to scroll to */}
            <div ref={messagesEndRef} />\n        </div>\n      </ScrollArea>\n\n      {/* Message Input Area */}
        {currentChatId && (\n          <div className=\"p-4 md:px-6 md:pb-4 border-t border-gray-700 flex-shrink-0\">\n            <div className=\"max-w-4xl mx-auto w-full\">\n               <MessageInput />\n            </div>\n          </div>\n      )}\n    </main>\n  );\n}"
      },
      "messageInput": {
        "path": "components/chat/MessageInput.tsx",
        "code": "'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useChat } from '@/hooks/useChat';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea'; // Changed from Input for multi-line\nimport { SendHorizontal, Plus, Mic, Loader2, AlertCircle } from 'lucide-react';\n\nexport default function MessageInput() {\n  const [inputValue, setInputValue] = useState('');\n  const { sendMessage, isSendingMessage, error } = useChat();\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  // Auto-resize textarea height\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto'; // Reset height\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [inputValue]);\n\n  const handleSendMessage = (e?: React.FormEvent<HTMLFormElement>) => {\n    e?.preventDefault();\n    const trimmedInput = inputValue.trim();\n    if (trimmedInput && !isSendingMessage) {\n      sendMessage(trimmedInput);\n      setInputValue('');\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault(); // Prevent newline on Enter\n        handleSendMessage();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSendMessage} className=\"relative w-full\">\n        {error && !isSendingMessage && (\n             <div className=\"absolute -top-8 left-0 flex items-center gap-2 text-xs text-red-500 mb-1\">\n                <AlertCircle size={14} /> Error sending: {error.length > 50 ? error.substring(0, 50) + '...' : error}\n             </div>\n        )}\n      <div className=\"flex items-end gap-2 bg-gray-800 rounded-lg p-2 border border-gray-700 shadow-lg\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-white flex-shrink-0\" type=\"button\">\n            <Plus size={20} />\n          </Button>\n          <Textarea\n            ref={textareaRef}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message here... (Shift+Enter for newline)\"\n            className=\"flex-1 bg-transparent border-none focus:ring-0 text-white placeholder-gray-500 resize-none overflow-y-hidden max-h-40 min-h-[40px] px-2 py-2 focus-visible:ring-0 focus-visible:ring-offset-0 shadow-none\"\n            rows={1}\n            disabled={isSendingMessage}\n          />\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-purple-400 hover:bg-gray-700 rounded-full flex-shrink-0\" type=\"button\" disabled={isSendingMessage}>\n            <Mic size={20} />\n          </Button>\n          <Button\n            type=\"submit\"\n            size=\"icon\"\n            className=\"bg-purple-600 hover:bg-purple-700 text-white rounded-full flex-shrink-0\"\n            disabled={isSendingMessage || !inputValue.trim()}\n          >\n            {isSendingMessage ? <Loader2 size={20} className=\"animate-spin\" /> : <SendHorizontal size={20} />}\n          </Button>\n      </div>\n    </form>\n  );\n}"
      }
    }
  }